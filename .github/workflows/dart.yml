# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Flutter

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
    
jobs:
  build:
    name: Create ${{ matrix.target }} build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        target: [ Android ]
        #target: [ Android, iOS ]
        sdk: [ stable ]
        #sdk: [stable, beta, dev, 2.12.3, 2.13.3]
        include:
          - os: ubuntu-latest
            target: Android
            build_target: apk
            build_path: ./build/app/outputs/flutter-apk/app-release.apk
            file_name: app-release.apk
            artifact_name: android_artifact
            appcenter_name: Tiktok-Connector
          - os: macos-latest
            target: iOS
            build_target: ipa
            build_path: ./build/ios/ipa/tiktok_tool.ipa
            file_name: tiktok_tool.ipa
            artifact_name: ios_artifact
            appcenter_name: Tiktok-Connector-iOS
      # Disable fail-fast as we want results from all even if one fails.
      fail-fast: false
    steps:
      # CHECKOUT REPOSITORY
      - uses: actions/checkout@v3

      # INSTALL PLATFORM DEPENDENCY
      - name: Install Linux dependencies
        if: matrix.target == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libx11-dev pkg-config cmake ninja-build libblkid-dev
      - name: Install Android dependencies
        if: matrix.target == 'Android'
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '11'

      # INSTALL FLUTTER SDK
      - name: Install Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ matrix.sdk }}
          flutter-version: '3.7.10'

      # GET FLUTTER DEPENDENCY
      - name: Install Flutter project dependency
        run: |
          flutter doctor -v
          flutter pub get
          flutter packages pub run build_runner build --delete-conflicting-outputs

      # START BUILD WEB ----------------------
      - name: Build Web
        if: matrix.target == 'Android'
        run: flutter build web -t ./lib/main.dart --release
      # END BUILD ANDROID ------------------------

      # START BUILD ANDROID ----------------------
      - name: Build Android
        if: matrix.target == 'Android'
        run: flutter build ${{matrix.build_target}} -t ./lib/main.dart --release
        #|
        #yes | flutter doctor --android-licenses
        #flutter build ${{matrix.build_target}} -t ./lib/main.dart --release
      # END BUILD ANDROID ------------------------

      # START BUILD IOS --------------------------
      # INSTALL APPLE CERTIFICATE AND PROVISIONING
      - name: Install the Apple certificate and provisioning profile
        if: matrix.target == 'iOS'
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          cd ios
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      # BUILD IPA FILE
      - name: Build iOS
        if: matrix.target == 'iOS'
        run: flutter build ipa -t ./lib/main.dart --release --export-options-plist=./ios/ExportOptions.plist

      # CLEAN UP KEYCHAIN AND PROVISIONING PROFILE
      - name: Clean up keychain and provisioning profile
        if: matrix.target == 'iOS'
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm -rf ~/Library/MobileDevice/Provisioning\ Profiles/
      # END BUILD IOS ----------------------------

      # UPLOAD IPA TO ARTIFACT BEFORE DISTRIBUTE TO APP CENTER
      - name: Upload iOS to artifact
        if: matrix.target == 'iOS'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.build_path }}

      # DISTRIBUTE WEB TO FIREBASE
      - name: Distribute Web app to Firebase Hosting
        if: matrix.target == 'Android'
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_TIKTOK_TOOL_APP }}'
          channelId: live
          projectId: tiktok-tool-app

      # DISTRIBUTE APK TO APP CENTER
      - name: Distribute Android to App Center
        if: matrix.target == 'Android'
        uses: wzieba/AppCenter-Github-Action@v1
        with:
          appName: tuankhai0811/${{ matrix.appcenter_name }}
          token: ${{ secrets.APP_CENTER_TOKEN }}
          group: Public
          file: ${{ matrix.build_path }}
          notifyTesters: false
          debug: false

  # DISTRIBUTE IOS TO APP CENTER
  upload:
    name: Distribute iOS to AppCenter
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Get artifact
        uses: actions/download-artifact@v3
        with:
          name: ios_artifact
      - name: Check files
        run: ls -R
      - name: Upload file to App Center
        if: hashFiles('tiktok_tool.ipa') != ''
        uses: wzieba/AppCenter-Github-Action@v1
        with:
          appName: tuankhai0811/Flutter-Architecture-iOS
          token: ${{ secrets.APP_CENTER_IOS_TOKEN }}
          group: Public
          file: tiktok_tool.ipa
          notifyTesters: true
          debug: false
